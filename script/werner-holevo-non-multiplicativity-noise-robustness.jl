using LinearAlgebra
using CVChannel
using Convex
using Test
using DelimitedFiles

function noisyWHnonMult()
    print("\n\nThis script explores the Werner-Holevo channel's non-multiplicativity's robustness to noise.")
    print("\nTo do this we just take a linear combination of the Werner-Holevo channel with the maximally")
    print(" depolarizing channel.")

    println("First we initialize the solver (One moment please...)")
    identChan(X) = X
    eaCVDual(choi(identChan,2,2),2,2)

    println("Now we actually get our data.")
    println("We consider d=3 and p in [0,0.05,...,0.3] and mixing parameter in [0,0.5,...,0.45].")
    println("NOTE: This will take a few minutes.")
    dim = 3
    p_vals = 0:0.05:0.3
    mix_vals = 0:0.05:0.45
    depol_choi = Matrix(I/dim, dim^2, dim^2)
    len, wid = length(p_vals), length(mix_vals)
    mult_table = zeros(len,wid)
    cv_table = zeros(len,wid)
    p_ctr, mix_ctr = 0, 1
    for p in p_vals
        println("Now evaluating for p = ", p)
        wern_choi = dim*wernerState(dim,p)
        p_ctr = p_ctr + 1
        for mix_amt in mix_vals
            if mix_amt == mix_vals[Int(round(length(mix_vals)/2))]
                println("Now halfway through this value of p.")
            end
            mix_choi = (1-mix_amt)*wern_choi + mix_amt*depol_choi #This uses linearity of Choi mapping
            mix_cv = pptCVDual(mix_choi,dim,dim)

            kron_par_choi = kron(mix_choi,mix_choi)
            par_choi = permuteSubsystems(kron_par_choi,[1,3,2,4],dim*[1,1,1,1])
            par_cv = pptCVPrimal(par_choi,dim^2,dim^2)

            mult_table[p_ctr,mix_ctr] = (par_cv[1] - mix_cv[1]^2)
            cv_table[p_ctr,mix_ctr] = mix_cv[1]

            mix_ctr = mix_ctr + 1
        end
        mix_ctr = 1
    end

    info_vec = Vector{Union{Nothing,String}}(nothing, 2*len+1)
    info_vec[1] = "INFO:"
    info_vec[2] = "Generated by werner-holevo-non-multiplicativity-noise-robustness.jl"
    info_vec[3] = "dim = " * string(dim)
    info_vec[4] = "p_vals range: " * string(p_vals)
    info_vec[5] = "mix_vals range: " * string(mix_vals)
    data_to_save = hcat(vcat(vcat(mult_table, zeros(1,wid)),cv_table),info_vec)
    println("Please name the file you'd like to write the results to: \n")
    file_name = readline()
    file_to_open = string(file_name,".csv")
    writedlm(file_to_open, data_to_save, ',')
    if all(mult_table -> mult_table < 1e-4 , mult_table)
        println("Something went awry. Please check your results.")
        return false
    else
        #We build printable multiplicativity table
        top_row = hcat(["pâ†“  mult:"],[mix_vals;]')
        results = vcat(top_row,hcat([p_vals;],mult_table))
        println("This is the table of multiplicativity values:")
        show(stdout, "text/plain", results)
        println("")
        println("Your results may also be found in your saved data file.")
        return true
    end
end

@testset "non-Multiplicativity with Noise" begin
    @test noisyWHnonMult()
end
println("Goodbye!")
