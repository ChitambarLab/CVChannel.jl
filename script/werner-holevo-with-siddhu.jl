using LinearAlgebra
using CVChannel
using Convex
using Test
using DelimitedFiles

"""
This obtains data about the Werner-Holevo channel when tensored
with the Siddhu channel.
"""

print("\nThis script shows that there is non-multiplicativity of")
print(" the Werner-Holevo channel tensored with the Siddhu channel.")

println("First we define the channel function.")
function siddhuChannel(ρ :: Matrix{<:Number}, s :: Union{Int,Float64})
    K0 = [sqrt(s) 0 0 ; 0 0 0 ; 0 1 0]
    K1 = [0 0 0 ; sqrt(1-s) 0 0 ; 0 0 1]
    return K0*ρ*K0' + K1*ρ*K1'
end

@testset "verify Siddhu channel" begin
    for s in [0:0.1:0.5;]
        sidchan(X) = siddhuChannel(X,s)
        testchan = Choi(sidchan,3,3)
        α = 1-s
        γ = sqrt(s)
        β = sqrt(1-s)
        @test isapprox(testchan.JN,
            [s 0 0 0 0 γ 0 0 0;
             0 α 0 0 0 0 0 0 β;
             0 0 0 0 0 0 0 0 0 ;
             0 0 0 0 0 0 0 0 0 ;
             0 0 0 0 0 0 0 0 0 ;
             γ 0 0 0 0 1 0 0 0 ;
             0 0 0 0 0 0 0 0 0 ;
             0 0 0 0 0 0 0 0 0 ;
             0 β 0 0 0 0 0 0 1
            ],
            atol = 1e-6
        )
    end
end


@testset "Werner-Holevo with Siddhu is Non-Multiplicative" begin
    println("Now we actually verify non-multiplicativity.")
    λ_range = [0:0.025:0.325;]
    s_range = [0:0.1:0.5;]
    λ_ctr, s_ctr = 1,1
    data_table = zeros(length(s_range),length(λ_range))
    for λ_id in λ_range
        println("---Now scanning λ=",λ_id,"---")
        A,B,g,a = generalWHLPConstraints(1,3,λ_id*ones(1))
        cvWH, v1 =wernerHolevoCVPPT(1,3,A,B,g,a)
        whChan(X) = wernerHolevoChannel(X,λ_id)
        wh_chan = Choi(whChan,3,3)
        for s_id in s_range
            println("Now scanning s=",s_id,".")
            target_val = 2*cvWH
            sidchan(X) = siddhuChannel(X,s_id)
            sid_chan= Choi(sidchan,3,3)

            par_dims = [wh_chan.in_dim, wh_chan.out_dim, sid_chan.in_dim, sid_chan.out_dim]
            par_JN = permuteSubsystems(kron(wh_chan.JN, sid_chan.JN), [1,3,2,4], par_dims)
            par_in_dim = wh_chan.in_dim * sid_chan.in_dim
            par_out_dim = wh_chan.out_dim * sid_chan.out_dim
            par_cv, = pptCVDual(par_JN, par_in_dim, par_out_dim)

            non_mult = par_cv - target_val
            isapprox(non_mult,0,atol=3e-6) ?
                data_table[s_ctr,λ_ctr] = 0 :
                    data_table[s_ctr,λ_ctr] = non_mult

            s_ctr += 1
            end
            λ_ctr += 1
            s_ctr = 1
        end

        println("\n Here is the data.")
        show(stdout, "text/plain", data_table)
        println("Note that the non-multiplicativity is the same for all s.")
        println("Also note that as λ increases, the non-multiplicativity decreases.")

        header, s_label = hcat("s|λ:",λ_range'), s_range
        data_to_save = vcat(header,hcat(s_label, data_table))

        info_vec = Vector{Union{Nothing,String}}(nothing, size(data_to_save)[1])
        info_vec[1] = "INFO:"
        info_vec[2] = "Generated by werner-holevo-with-siddhu.jl"
        info_vec[4] = "λ_range ="*string(λ_range)
        info_vec[5] = "s_range="*string(s_range)
        data_to_save = hcat(data_to_save,info_vec)

        println("Please name the file you'd like to write the results to: \n")
        file_name = readline()
        file_to_open = string(file_name,".csv")
        writedlm(file_to_open, data_to_save, ',')

        #This is sufficient for checking that there is non-multiplicativity somewhere
        @test data_table[1:1:1]>[0.1]
end
